using CubicEoSDatabase

"""
    load(BrusilovskyEoSComponent; name::AbstractString[, component_dbs])

Return `BrusilovskyEoSComponent` named `name` with parameters from `component_dbs`.

# Arguments
- the first argument is `BrusilovskyEoSComponent`

# Keywords
- name::AbstractString: the component name
- component_dbs: an iterable of `ComponentDatabase` objects (by default,
(Data.martinez(), Data.brusilovsky_comp()))

# Returns
- `BrusilovskyEoSComponent`: the component generated by merging the EoS properties for the
given name from databases
"""
function load(
    ::Type{<:BrusilovskyEoSComponent};
    name::AbstractString,
    component_dbs = (Data.martinez(), Data.brusilovsky_comp())
)
    comp_properties = foldl(
        (dict, db) -> merge!(dict, getentry(db, name)),
        component_dbs;
        init = Dict{Symbol, Any}()
    )

    return __load_brusilovsky_comp__(; comp_properties...)
end

function __load_brusilovsky_comp__(
    ;
    name::AbstractString,
    molecular_mass,
    number_carbons,
    critical_temperature,
    critical_pressure,
    acentric_factor,
    eos_critical_compressibility,
    eos_critical_omega,
    eos_psi,
    extra_kw...  # unneeded keywords to construct component
)
    __load_brusilovsky_comp__(
        name,
        molecular_mass,
        number_carbons,
        critical_temperature,
        critical_pressure,
        acentric_factor,
        eos_critical_compressibility,
        eos_critical_omega,
        eos_psi
    )
end

function __load_brusilovsky_comp__(
    name::AbstractString,
    molecular_mass,
    number_carbons,
    critical_temperature,
    critical_pressure,
    acentric,
    critical_compressibility::AbstractString,
    critical_omega::AbstractString,
    psi::AbstractString
)
    Omegac  = 0.75001                       # Table (4.14)
    Zc      = 0.3357 - 0.0294 * acentric    # 4.203
    if acentric < 0.4489
        Psi = 1.050 + ( 0.105 + 0.482 * acentric ) * acentric   # 4.204
    else
        Psi = 0.429 + ( 1.004 + 1.561 * acentric ) * acentric   # 4.204
    end
    return BrusilovskyEoSComponent(
        name = name,
        critical_pressure = critical_pressure,
        critical_temperature = critical_temperature,
        acentric_factor = acentric,
        Omegac = Omegac,
        Zc = Zc,
        Psi = Psi,
        molar_mass = molecular_mass,
        carbon_number = number_carbons
    )
end

function __load_brusilovsky_comp__(
    name::AbstractString,
    molecular_mass,
    number_carbons,
    critical_temperature,
    critical_pressure,
    acentric,
    critical_compressibility,
    critical_omega,
    psi
)

    return BrusilovskyEoSComponent(
        ;
        name = name,
        critical_pressure = critical_pressure,
        critical_temperature = critical_temperature,
        acentric_factor = acentric,
        Omegac = critical_omega,
        Zc = critical_compressibility,
        Psi = psi,
        molar_mass = molecular_mass,
        carbon_number = number_carbons
    )
end

"""
    load(BrusilovskyEoSMixture; name::AbstractString[, component_dbs])

Return `BrusilovskyEoSMixture` by loading parameters for individual substances named `names`
from `component_dbs` and their interaction parameters from `mix_eos_db`.

# Arguments
- the first argument is `BrusilovskyEoSMixture`

# Keywords
- names::AbstractString: the names of components to load
- component_dbs: an iterable of `ComponentDatabase` objects (by default,
`(Data.martinez(), Data.brusilovsky_comp())`)
- mix_eos_db::MixtureDatabase: the database with the cross-component interaction
parameters (by default, `Data.brusilovsky_mix()`)

# Returns
- `BrusilovskyEoSMixture`: the EoS for the mixture of the specified substances
"""
function load(
    ::Type{<:BrusilovskyEoSMixture};
    names,
    component_dbs = (Data.martinez(), Data.brusilovsky_comp()),
    mix_eos_db::MixtureDatabase = Data.brusilovsky_mix()
)
    components = [
        load(
            BrusilovskyEoSComponent;
            name = name,
            component_dbs = component_dbs
        ) for name in names
    ]
    corrections = getmatrix(mix_eos_db, names)
    return BrusilovskyEoSMixture(;
        components = components,
        corrections...
    )
end
